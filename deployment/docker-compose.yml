version: '3.3'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181"
    hostname: zookeeper
    volumes:
      - /home/azureuser/zookeeper/data:/opt/zookeeper-3.4.13/data
  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1" # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: "markus-kafka.canadacentral.cloudapp.azure.com" # docker-machine ip
      KAFKA_LISTENERS: "INSIDE://:29092,OUTSIDE://:9092"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INSIDE"
      KAFKA_ADVERTISED_LISTENERS: "INSIDE://kafka:29092,OUTSIDE://markus-kafka.canadacentral.cloudapp.azure.com:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LOG_DIRS: /kafka/kafka-logs
      KAFKA_BROKER_ID: 1 
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - "zookeeper"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/<username>/kafka:/kafka/kafka-logs
  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'events'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      - '3306:3306'
    expose:
      - '3306'
    volumes:
      - ../init.sql:/docker-entrypoint-initdb.d/init.sql
      - my-db:/var/lib/mysql
  receiver:
    build:
      context: ../Receiver
    restart: always
    ports:
      - '8080:8080'
    expose:
      - '8080'
    depends_on:
      - "kafka"
  storage:
    build:
      context: ../Storage
    restart: always
    ports:
      - '8090:8090'
    expose:
      - '8090'
    depends_on:
      - "kafka"
      - "db"

  processing:
    build:
      context: ../Processing
    restart: always
    ports:
      - '8100:8100'
    network_mode: "host"
    expose:
      - '8100'
    depends_on:
      - "storage"
  audit:
    build:
      context: ../Audit
    restart: always
    ports:
      - '8110:8110'
    expose:
      - '8110'
    depends_on:
      - "kafka"
  dashboard:
    build:
      context: ../dashboard-ui
    ports:
      - "3000:3000"
    depends_on:
      - "processing"
      - "audit"


volumes:
  my-db:
