pipeline {
    agent any
    
    stages {
        stage('Lint') {
            steps {
                script {
                    def files = findFiles(glob: "**/*.py") // Search for Python files recursively in all directories
                    if (files) {
                        for (file in files) {
                            sh "pylint --fail-under 5 ${file.getRemote()}" // Use getRemote() to get the absolute file path
                        }
                    } else {
                        echo "No Python files found in the workspace"
                    }
                }
            }
        }
        stage('Security Scan') {
            steps {
                script {
                    def imageName = '<your_docker_image_name>' // Replace with your Docker image name
                    def clairScanCmd = "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -e CLAIR_ADDR=<clair_server_address> -e DOCKER_IMAGE=${imageName} quay.io/coreos/clairctl:v2.1.7-clair -c http://<clair_server_address> vuln ${imageName}"
                    
                    def clairScanOutput = sh(script: clairScanCmd, returnStdout: true).trim()
                    echo "Clair scan output: ${clairScanOutput}"
                    
                    // Optionally, you can analyze the scan output and take further actions based on the results
                    if (clairScanOutput.contains('High') || clairScanOutput.contains('Critical')) {
                        echo "High or critical vulnerabilities found. Take necessary actions."
                        // You can fail the build or send notifications here
                    } else {
                        echo "No high or critical vulnerabilities found. Proceed with deployment."
                    }
            }
    }
        }
        stage('Package') {
            steps {
                script {
                    docker.build('<docker_image_name>') // Replace <docker_image_name> with your desired image name
                    docker.withRegistry('https://registry.hub.docker.com', '<dockerhub_credentials>') {
                        docker.image('<docker_image_name>').push('latest')
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    // SSH into your 3855 VM and execute docker-compose up -d
                    sshagent(['<jenkins_ssh_credentials>']) {
                        sh 'ssh user@3855-vm "cd /path/to/docker-compose; docker-compose pull; docker-compose up -d"'
                    }
                }
            }
        }
    }
    
    post {
        success {
            // Trigger the downstream jobs or perform any other post-build actions
        }
    }
}
